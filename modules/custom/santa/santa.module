<?php

use Drupal\Core\Access\AccessResult;
use Drupal\node\NodeInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Database\Database;
use Drupal\file\Entity\File;

/**
 * Implementing hook_theme
 */
function santa_theme() {
  // Globe Search
  $theme['home_slider'] = [
    'variables' => [
      'data' => [],
      '#attached' => [
        'library' => 'santa/home-slider',
      ]
    ],
  ];

  // XML
  $theme['xml_upload'] = [
    'variables' => [
      'xml_upload_form' => [],
      'xml_listing_form' => [],
    ],
  ];

  return $theme;
}

/**
 * Implements hook_preprocess_page().
 */
function santa_preprocess_page(&$variables) {
  $variables['attributes']['class'] = [];
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
	
	$variables['attributes']['class'] = [];
  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['#attached']['drupalSettings']['language'] = $language;

  $variables['#attached']['drupalSettings']['tranlateClass'] = '';
	if(isset($variables['node'])) {
    $nid = $variables['node']->id();
    $variables['attributes']['class'][] = 'node-' . $nid;
    if($variables['node']->hasTranslation($language)) {
      $variables['attributes']['class'][] = 'notranslate';
      $variables['#attached']['drupalSettings']['tranlateClass'] = 'notranslate';
    }
  }
}

/**
 * Implementing hook_form_form_id_alter()
 */
function santa_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
	$node = $form_state->getFormObject()->getEntity();
	$nid = $node->id();
	$contentType = $node->getType();
	
	$config = \Drupal::config('santa.xml_settings');
	$xmlContentType = $config->get('content_types');
	
	if(in_array($contentType, $xmlContentType)) {
		$fid = getxmlCsvSampleData($nid);
		$form['xml'] = array(
      '#type' => 'details',
      '#title' => t('Sample XML/CSV'),
      '#description' => t('Sample XML/CSV'),
      '#group' => 'advanced',
      '#open' => FALSE,
			'sample_file' => [
				'#type' => 'managed_file',
				'#title' => t('XML/CSV File'),
				'#upload_location' => 'public://xml/sample',
				'#default_value' => [$fid],
				'#multiple' => false,
				'#description' => t('Allowed extensions: xml csv'),
				'#upload_validators' => array(
					'file_validate_extensions' => array('xml csv'),
				),
			],
      '#weight' => 1000,
    );
		
		foreach (array_keys($form['actions']) as $action) {
      if ($action != 'preview' && isset($form['actions'][$action]['#type']) && $form['actions'][$action]['#type'] === 'submit') {
        $form['actions'][$action]['#submit'][] = 'santa_xml_sample_save';
      }
    }
	}
	
}	

function santa_xml_sample_save($form, FormStateInterface $form_state) {
	$config = \Drupal::config('santa.xml_settings');
	$xmlContentType = $config->get('content_types');
	$node = $form_state->getFormObject()->getEntity();
	$nid = $node->id();
	$contentType = $node->getType();
	$sampleFileId = $form_state->getValue('sample_file');
	
	if(in_array($contentType, $xmlContentType) && !empty($sampleFileId)) {
		// Save File 
		$sampleFileId = $sampleFileId[0];
		$sampleFile = File::load($sampleFileId);
		$sampleFile->setPermanent();
		$sampleFile->save();
		
		$connection = Database::getConnection();
		$connection->merge('santa_xml_csv_sample')
			->key(['nid' => $nid])
			->fields(['fid' => $sampleFileId])
			->execute();
	}
  
}


/**
 * Implements hook_preprocess_node().
 */
function santa_preprocess_node(&$variables) {
  $config = \Drupal::config('santa.xml_settings');
	$xmlContentType = $config->get('content_types');
	
	$contentType = $variables['node']->getType();
	
	if(in_array($contentType, $xmlContentType)) {
    $nid = $variables['node']->id();
    $fid = getxmlCsvSampleData($nid);
		
		if(!empty($fid)) {
			$xmlUploadForm = [];
			if($variables['node']->access('update')) {
				$xmlUploadForm = \Drupal::formBuilder()->getForm('Drupal\santa\Form\XmlUploadForm', $nid, $fid);
			}
			$xmlListingForm = \Drupal::formBuilder()->getForm('Drupal\santa\Form\XmlListingForm', $nid, $fid);

			$variables['content']['xmlUploadForm'] = $xmlUploadForm;
			$variables['content']['xmlListingForm'] = $xmlListingForm;

			$variables['#attached']['library'][] = 'santa/datatables';
			$variables['#attached']['library'][] = 'santa/datatables_core';
		}
  }
}

/**
 * Get  XML/CSV Sample Data
 */
function getxmlCsvSampleData($nid) {
	$connection = Database::getConnection();
	$query = $connection->select('santa_xml_csv_sample', 'sample');
	$query->condition('sample.nid', $nid);
	$query->fields('sample', ['fid']);
	$result = $query->execute()->fetchAssoc();
	
	return isset($result['fid']) ? $result['fid'] : '';
}	


/**
 * Implementing hook_preprocess_block
 */
function santa_preprocess_block(&$variables) {
  if (!empty($variables['content']['body'][0]['#text'])) {
    if (strpos($variables['content']['body'][0]['#text'], '{{ search_form }}') !== false) {
      $block = \Drupal\block\Entity\Block::load('santacity_search');
      $searchForm = \Drupal::entityTypeManager()->getViewBuilder('block')->view($block);
      $searchForm = render($searchForm);
      $variables['content']['body'][0]['#text'] = str_replace('{{ search_form }}', $searchForm, $variables['content']['body'][0]['#text']);
    }

    if (strpos($variables['content']['body'][0]['#text'], '{{ contact_form }}') !== false) {
      /*
      $webform = \Drupal::entityTypeManager()->getStorage('webform')->load('contact');
      $view_builder = \Drupal::service('entity_type.manager')->getViewBuilder('webform');
      $build = $view_builder->view($webform);
      */

      $webform = \Drupal::entityTypeManager()->getStorage('webform')->load('help');
      $webform = $webform->getSubmissionForm();
      $webform = render($webform);
      $variables['content']['body'][0]['#text'] = str_replace('{{ contact_form }}', $webform, $variables['content']['body'][0]['#text']);
    }
  }

  //return $build;
  return;
}

/**
 * Implementing hook_preprocess_field
 */
function santa_preprocess_field(&$variables, $hook) {


}

/**
 * Implements hook_cronapi().
 */
function santa_cron() {
  \Drupal::logger('santa_cron')->notice('Event & New cron tab');
  event_expire();
  news_expire();
}

/**
 * The callback for the cron job,
 */
function event_expire($node = '') {
  if(!empty($node)) {
    $eventNodes = [$node];
  }
  else {
    $eventNodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'events']);
  }

  if(!empty($eventDate[0]['end_value'])) {
    foreach ($eventNodes as $eventNode) {
      $eventDate = $eventNode->get('field_start_date')->getValue();
      $eventDateTimestamp = strtotime($eventDate[0]['end_value']);
      $currentTimestamp = time();

      if($eventDateTimestamp < $currentTimestamp) {
        $eventNode->setPublished(false);
        $eventNode->save();
      }
    }
  }
}

/**
 * The callback for the cron job,
 */
function news_expire($node = '') {
  if(!empty($node)) {
    $eventNodes = [$node];
  }
  else {
    // $$newsNodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'news']);
    $newsNodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'news']);
  }

  if(!empty($newsDate[0]['value'])) {
    foreach ($newsNodes as $newsNode) {
      $newsDate = $newsNode->get('field_news_date')->getValue();
      $newsDateTimestamp = strtotime($newsDate[0]['value']);
      $currentTimestamp = time();

      if($newsDateTimestamp < $currentTimestamp) {
        $newsNode->setPublished(false);
        $newsNode->save();
      }
    }
  }
}

/**
 * Implements hook_entity_presave().
 */
function santa_entity_postsave(Drupal\Core\Entity\EntityInterface $entity) {
  if($entity->bundle() === 'events') {
		// event_expire($entity);
	}
	if($entity->bundle() === 'news') {
		// news_expire($entity);
	}
}


/**
 * Implements hook_node_access().
 */
function santa_node_access(NodeInterface $node, $op, AccountInterface $account) {
	$type = $node->getType();
	$user = \Drupal::entityManager()->getStorage('user'); 
	$user = $user->load($account->id());
	switch ($op) {
		case 'update':
			if(in_array($type, ['page', 'events']) && $node->hasField('field_category') && $user->hasField('field_category') ) {
				$userValues = $user->toArray();
				$nodeValues = $node->toArray();
				
				$node_departments = $nodeValues['field_category'];
				$user_departments = $userValues['field_category'];
				
				foreach($user_departments as $user_department) {
					foreach($node_departments as $node_department) {
						if($user_department['target_id'] == $node_department['target_id']) {
							return AccessResult::allowed();
						}
					}
				}
				
			}
			break;
	}
	
	
}
